#!/usr/bin/python3
import boto3, botocore
import sys, uuid, os, configparser, time


def parse_folder_name(path):
    elements = path.split("/")
    return elements[len(elements) - 1]


def is_bucket_exist(bucket):
    try:
        s3_client.head_bucket(Bucket=bucket)
        return True
    except botocore.exceptions.ClientError as _err:
        _ret = _err.response["Error"]["Message"]
        if _ret == "Not Found":
            return False


config = configparser.ConfigParser()
config.read("configure.ini")
wait_flag = None

if len(sys.argv[1:]) < 3:
    print("wrong number of argvs")
    exit(0)
if "--wait" in sys.argv:
    wait_flag = True
else:
    wait_flag = False
args = []
for e in sys.argv[1:]:
    if e != "--wait":
        args.append(e)
pics_path = args[0].rstrip()
c_bucket_input_name = args[1].rstrip()
c_bucket_output_name = args[2].rstrip()

# pics_path = "./sample_pics_medium"
# c_bucket_input_name = config["S3"]["bucket_input"]
# c_bucket_output_name = config["S3"]["bucket_output"]

region_name = config["INIT"]["region_name"]
aws_access_key = config["INIT"]["aws_access_key"]
aws_secret_access_key = config["INIT"]["aws_secret_access_key"]
bucket_input_name = config["S3"]["bucket_input"]
bucket_output_name = config["S3"]["bucket_output"]
queue_name = config["SQS"]["queue_name"]
visible_time = config['SQS']['VISIBLE_TIME']

if bucket_input_name != c_bucket_input_name:
    print("client: input name same as one created during setup")
    bucket_input_name = c_bucket_input_name
if bucket_output_name != c_bucket_output_name:
    print("client: output name same as one created during setup")
    bucket_output_name = c_bucket_output_name

# ------------------------------   SESSION   ------------------------------
boto3.setup_default_session(
    aws_access_key_id=aws_access_key,
    aws_secret_access_key=aws_secret_access_key,
    region_name=region_name)
session = boto3.DEFAULT_SESSION
sqs_client = session.client(service_name='sqs')
sqs_resource = session.resource(service_name='sqs')
s3_client = session.client(service_name='s3')
s3_resource = session.resource(service_name='s3')

# ------------------------------     WORK    ------------------------------
if not is_bucket_exist(bucket_input_name):
    s3_client.create_bucket(Bucket=bucket_input_name, CreateBucketConfiguration={'LocationConstraint': region_name})
    time.sleep(5)

bucket_input = s3_resource.Bucket(bucket_input_name)
uuid = uuid.uuid4().__str__()
folder_name = parse_folder_name(pics_path) + "_" + uuid[0:7] + "_" + time.strftime("%Y%m%d%H%M%S") + "_minimoto"
files = os.listdir(pics_path)
for file in files:
    uploaded_path = pics_path + "/" + file
    stored_path = folder_name + "/" + file.__str__()
    bucket_input.upload_file(uploaded_path, stored_path)

try:
    queue = sqs_resource.create_queue(QueueName=queue_name, Attributes={'VisibilityTimeout': visible_time})
    # bucket_input_name, bucket_output_name, folder_name
    request = "transform" + "?" + "bucket_input_name=" + bucket_input_name + ":" + \
              "bucket_output_name=" + bucket_output_name + ":" + \
              "folder_name=" + folder_name
    response = queue.send_message(MessageBody=request, DelaySeconds=0)
    print("You'll find the output in " + "s3://" + bucket_output_name + "/" + folder_name + ".mp4")
except botocore.exceptions.ClientError as err:
    print("Queue doesn't exit!")
    exit(0)

if wait_flag is True:
    print("client: waiting for video complete:")
    while True:
        try:
            s3_resource.Object(bucket_output_name, folder_name + ".mp4").load()
            break
        except botocore.exceptions.ClientError as err:
            ret = err.response["Error"]["Message"]
            if ret == "Not Found":
                print("client: not found yet...wait...")
                time.sleep(8)
    print("client: tran-coding complete")
